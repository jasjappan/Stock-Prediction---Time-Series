# -*- coding: utf-8 -*-
"""stockprrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dIsM_MV3Ul_gdn1XSMYtVCEN8RoIyUvB
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt

import xgboost as xgb

from tensorflow import keras
from tensorflow.keras import layers

  
from keras.layers import Dense
from sklearn.impute import KNNImputer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import precision_score

df = pd.read_csv('nifty50.csv')

import datetime

df['Date'] = pd.to_datetime(df['Date'], format="%Y %m %d")
df['Date'].isnull()
check_nan = df['Date'].isnull().values.any()
 
# printing the result
print(check_nan)

"""# **Exploratory Data Analysis**"""

plt.plot(df['Date'], df['Close'])



df.plot.scatter(x = 'Date', y = 'Close', alpha=0.1, s=df['Open']-df['Close'],c=(df['High']-df['Close']));

df.plot.scatter(x = 'Date', y = 'Close', alpha=0.1, s=df['Open']-df['Close'],c=(df['High']-df['Close']), cmap=plt.get_cmap("jet"), colorbar=True);

df.plot.scatter(x = 'Date', y = 'Close', alpha=0.1, cmap=plt.get_cmap("jet"), colorbar=True);

testdata = df[0:500]
testdata.plot.scatter(x = 'Date', y = 'Close', alpha=0.5,s=testdata["Open"]-testdata["Close"],c=testdata["High"]-testdata["Low"], cmap=plt.get_cmap("jet"), colorbar=True);

pd.plotting.scatter_matrix(testdata, figsize=(12,8))

corr_mat = df.corr()
corr_mat

nifty = df.iloc[ :, 1:]

nifty

nifty["Tommorow"] = nifty["Close"].shift(-1)
nifty["Target"] = (nifty["Tommorow"] > nifty["Close"]).astype(int)

"""# **Removing Nan Data with KNN**"""

check_nan = nifty.isnull().values.any()
 
print(check_nan)

imputer = KNNImputer(n_neighbors=2)
d1 = imputer.fit_transform(nifty)

nifty

d1 = pd.DataFrame(d1)

df.isnull()

check_nan = d1.isnull().values.any()
 
print(check_nan)

"""#  **Random Fores Classification**

---


"""

model = RandomForestClassifier(n_estimators=100, min_samples_split=100, random_state=1)
train = d1.iloc[:-100]
test = d1.iloc[-100:]





d1

df

predictors = [0,1,2,3,5]
model.fit(train[predictors], train[7])

"""## **Random Fores M1**"""

preds = model.predict(test[predictors])
preds = pd.Series(preds, index=test.index)
precision_score(test[7], preds)

preds

train

test[7]

df

date_pred = df.iloc[-100:, 0]

plt.scatter(date_pred,test[7])

plt.scatter(date_pred,preds)

"""## Random Forest **M2**"""

model = RandomForestClassifier(n_estimators=50, min_samples_split=10, random_state=1)
train = d1.iloc[:-100]
test = d1.iloc[-100:]


predictors = [0,1,2,3,5]
model.fit(train[predictors], train[7])

preds = model.predict(test[predictors])
preds = pd.Series(preds, index=test.index)
precision_score(test[7], preds)

model = RandomForestClassifier(n_estimators=50, min_samples_split=50, random_state=1)
train = d1.iloc[:-100]
test = d1.iloc[-100:]


predictors = [0,1,2,3,5]
model.fit(train[predictors], train[7])

preds = model.predict(test[predictors])
preds = pd.Series(preds, index=test.index)
precision_score(test[7], preds)

"""Adding Next Days Clossing Price as a Predictor"""

model = RandomForestClassifier(n_estimators=50, min_samples_split=50, random_state=1)
train = d1.iloc[:-100]
test = d1.iloc[-100:]


predictors = [0,1,2,3,5,6]
model.fit(train[predictors], train[7])

preds = model.predict(test[predictors])
preds = pd.Series(preds, index=test.index)
precision_score(test[7], preds)

model = RandomForestClassifier(n_estimators=100, min_samples_split=100, random_state=1)
train = d1.iloc[:-100]
test = d1.iloc[-100:]


predictors = [0,1,2,3,5,6]
model.fit(train[predictors], train[7])

preds = model.predict(test[predictors])
preds = pd.Series(preds, index=test.index)
precision_score(test[7], preds)

"""**XGBoost Classification**"""

import xgboost as xgb
predictors = [0,1,2,3,5,6]

xgb = xgb.XGBClassifier()
xgb.fit(train[predictors], train[7])

preds = xgb.predict(test[predictors])
preds = pd.Series(preds, index=test.index)
precision_score(test[7], preds)

model = RandomForestClassifier(n_estimators=100, min_samples_split=100, random_state=1)

model = RandomForestClassifier(n_estimators=100, min_samples_split=100, random_state=1)
train = d1.iloc[:-100]
test = d1.iloc[-100:]


predictors = [0,1,2,3,5,6]
model.fit(train[predictors], train[7])

preds = model.predict(test[predictors])
preds = pd.Series(preds, index=test.index)
precision_score(test[7], preds)

plt.scatter(date_pred,test[7])

plt.scatter(date_pred,preds)

"""### Decision **Tree**"""

from sklearn import tree
treeplt = tree.DecisionTreeClassifier()
train = d1.iloc[0:2500]
test = d1.iloc[2500:]

predictors = [0,1,2,3,5]
treeplt.fit(train[predictors], train[7])

preds = treeplt.predict(test[predictors])
preds = pd.Series(preds, index=test.index)
precision_score(test[7], preds)

tree.plot_tree(treeplt)

plt.scatter(date_pred,test[7],alpha=0.8,color = 'r')

plt.scatter(date_pred,preds,alpha=0.8,color = 'c')

"""Cyan for Predicted Data and Red for actual Data

## **Regression Based Prediction of Stock Market**
"""

train = d1.iloc[:-100]
test = d1.iloc[-100:]

from sklearn.ensemble import GradientBoostingRegressor
gbr = GradientBoostingRegressor(random_state=42)

predictors = [0,1,2,5,6,7]

gbr.fit(train[predictors], train[3])
preds = gbr.predict(test[predictors])

preds
print(mean_squared_error(test[3], preds))

test[3]

plt.scatter(date_pred,preds,alpha=0.8,color = 'c')
 plt.scatter(date_pred,test[3],alpha=0.8,color = 'r')

"""Cyan for the Predicted value
Red for the Orignal Data
"""

plt.scatter(date_pred,test[3]-preds)

train = d1.iloc[:-100]
test = d1.iloc[-100:]

predictors = [0,1,2,5,6,7]

from sklearn import linear_model
linear = linear_model.ARDRegression()

linear.fit(train[predictors], train[3])

preds = linear.predict(test[predictors])

preds = pd.DataFrame(preds)

from sklearn.metrics import mean_squared_error
print(mean_squared_error(test[3], preds))

plt.scatter(date_pred,test[3],alpha=0.8,color = 'r')
plt.scatter(date_pred,preds,alpha=0.8,color = 'c')